<template>
  <va-modal 
    v-model="isVisible" 
    :hide-default-actions="true"
    :fullscreen="false"
    :mobile-fullscreen="true"
    max-width="600px"
    no-padding
  @before-open="modalA11y.onBeforeOpen"
  @open="modalA11y.onOpen"
  @close="() => { modalA11y.onClose(); closeModal() }"
  >
    <div v-if="collaborateur" class="collaborateur-info-modal">
      <!-- Header moderne avec gradient et animation -->
      <div class="header-section" :style="{ '--collaborateur-color': collaborateurColor }">
        <div class="header-background">
          <div class="gradient-overlay"></div>
          <div class="pattern-overlay"></div>
        </div>
        
        <div class="header-content">
          <div class="collaborateur-info">
            <div class="avatar-container">
              <div class="collaborateur-avatar" :style="{ backgroundColor: collaborateurColor }">
                {{ avatarInitials }}
              </div>
              <div class="avatar-ring"></div>
            </div>
            
            <div class="info-text">
              <h2 class="collaborateur-name">{{ collaborateur.prenom }} {{ collaborateur.nom }}</h2>
              <p class="meta-info">
                <va-icon name="work" size="16px" />
                {{ collaborateur.metier || 'Collaborateur' }}
                <span class="meta-separator">•</span>
                <va-icon name="place" size="16px" />
                {{ collaborateur.ville }}
              </p>
            </div>
          </div>
          
          <div class="header-stats">
            <div class="stat-badge">
              <span class="stat-number">{{ collaborateurStats.totalDispos }}</span>
              <span class="stat-label">Disponibilités</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Zone de contenu scrollable -->
      <div class="scrollable-content">

      <!-- Zone de contenu scrollable -->
      <div class="scrollable-content">
        <!-- Section Contact -->
        <div class="content-section">
          <div class="section-card">
            <div class="section-header">
              <button class="section-toggle" @click="toggleSection('contact')">
                <div class="section-title">
                  <va-icon name="phone" color="primary" />
                  <span>Contact</span>
                </div>
                <va-icon 
                  :name="expandedSections.contact ? 'expand_less' : 'expand_more'" 
                  size="20px" 
                  class="expand-icon"
                />
              </button>
            </div>
            
            <div v-if="expandedSections.contact" class="section-content">
              <div class="contact-grid">
                <a :href="`tel:${collaborateur.phone}`" class="contact-card">
                  <va-icon name="phone" size="20px" color="success" />
                  <div class="contact-info">
                    <div class="contact-label">Téléphone</div>
                    <div class="contact-value">{{ collaborateur.phone }}</div>
                  </div>
                </a>
                <a :href="`mailto:${collaborateur.email}`" class="contact-card">
                  <va-icon name="email" size="20px" color="info" />
                  <div class="contact-info">
                    <div class="contact-label">Email</div>
                    <div class="contact-value">{{ collaborateur.email }}</div>
                  </div>
                </a>
              </div>
            </div>
          </div>
        </div>

        <!-- Section Disponibilités -->
        <div class="content-section">
          <div class="section-card">
            <div class="section-header">
              <button class="section-toggle" @click="toggleSection('dispos')">
                <div class="section-title">
                  <va-icon name="schedule" color="primary" />
                  <span>Disponibilités ({{ collaborateurStats.totalDispos }})</span>
                </div>
                <va-icon 
                  :name="expandedSections.dispos ? 'expand_less' : 'expand_more'" 
                  size="20px" 
                  class="expand-icon"
                />
              </button>
            </div>
            
            <div v-if="expandedSections.dispos" class="section-content">
              <div v-if="collaborateurDispos.length === 0" class="empty-state">
                <div class="empty-illustration">
                  <va-icon name="event_busy" size="48px" color="secondary" />
                </div>
                <h3 class="empty-title">Aucune disponibilité</h3>
                <p class="empty-subtitle">Ce collaborateur n'a pas de disponibilités cette semaine</p>
              </div>
              
              <div v-else class="dispos-grid">
                <div 
                  v-for="dispo in collaborateurDispos.slice(0, showAllDispos ? undefined : 3)" 
                  :key="dispo.id"
                  class="dispo-card"
                >
                  <div class="dispo-header">
                    <div class="dispo-date">{{ formatDateShort(dispo.date) }}</div>
                    <div class="dispo-type" :class="`type-${dispo.type || 'disponible'}`">
                      {{ dispo.type === 'mission' ? 'Mission' : 'Disponible' }}
                    </div>
                  </div>
                  <div class="dispo-details">
                    <div class="dispo-time">
                      <va-icon name="schedule" size="16px" />
                      {{ dispo.heure_debut }}-{{ dispo.heure_fin }}
                    </div>
                    <div class="dispo-lieu">
                      <va-icon name="place" size="16px" />
                      {{ dispo.lieu }}
                    </div>
                  </div>
                </div>
                
                <button 
                  v-if="collaborateurDispos.length > 3"
                  @click="showAllDispos = !showAllDispos"
                  class="show-more-btn"
                >
                  {{ showAllDispos ? 'Voir moins' : `Voir ${collaborateurDispos.length - 3} de plus` }}
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Section Statistiques -->
        <div class="content-section">
          <div class="section-card">
            <div class="section-header">
              <button class="section-toggle" @click="toggleSection('stats')">
                <div class="section-title">
                  <va-icon name="analytics" color="primary" />
                  <span>Statistiques</span>
                </div>
                <va-icon 
                  :name="expandedSections.stats ? 'expand_less' : 'expand_more'" 
                  size="20px" 
                  class="expand-icon"
                />
              </button>
            </div>
            
            <div v-if="expandedSections.stats" class="section-content">
              <div class="stats-modern-grid">
                <div class="stat-modern-card">
                  <div class="stat-icon">
                    <va-icon name="schedule" size="24px" color="info" />
                  </div>
                  <div class="stat-content">
                    <div class="stat-value">{{ collaborateurStats.heuresTotal }}h</div>
                    <div class="stat-label">Total heures</div>
                  </div>
                </div>
                <div class="stat-modern-card">
                  <div class="stat-icon">
                    <va-icon name="place" size="24px" color="success" />
                  </div>
                  <div class="stat-content">
                    <div class="stat-value">{{ collaborateurStats.lieuxUniques }}</div>
                    <div class="stat-label">Lieux différents</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Section Notes -->
        <div class="content-section">
          <div class="section-card">
            <div class="section-header">
              <button class="section-toggle" @click="toggleSection('notes')">
                <div class="section-title">
                  <va-icon name="notes" color="primary" />
                  <span>Notes</span>
                  <va-icon 
                    v-if="hasNotesChanges"
                    name="fiber_manual_record" 
                    size="8px" 
                    color="warning"
                    class="changes-indicator"
                  />
                </div>
                <va-icon 
                  :name="expandedSections.notes ? 'expand_less' : 'expand_more'" 
                  size="20px" 
                  class="expand-icon"
                />
              </button>
            </div>
            
            <div v-if="expandedSections.notes" class="section-content">
              <va-textarea
                v-model="localNotes"
                :readonly="!editMode"
                placeholder="Ajouter des notes..."
                autosize
                min-rows="3"
                max-rows="6"
                class="notes-textarea"
              />
              
              <div class="notes-actions">
                <template v-if="editMode">
                  <va-button 
                    size="small"
                    color="success"
                    icon="save"
                    @click="saveNotes"
                    :loading="savingNotes"
                  >
                    Sauvegarder
                  </va-button>
                  <va-button 
                    size="small"
                    color="secondary"
                    @click="cancelNotesEdit"
                  >
                    Annuler
                  </va-button>
                </template>
                <va-button 
                  v-else
                  size="small"
                  color="primary"
                  icon="edit"
                  @click="editMode = true"
                >
                  Modifier
                </va-button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Actions modernes sticky -->
      <div class="modal-actions-modern">
        <va-button
          color="secondary"
          @click="closeModal"
          class="action-btn-secondary"
        >
          Fermer
        </va-button>
        
        <va-button
          color="primary"
          icon="edit"
          @click="editCollaborateur"
          class="action-btn-primary"
        >
          Modifier le profil
        </va-button>
      </div>
    </div>
  </va-modal>
</template>

<script setup lang="ts">
import { ref, computed, watch } from 'vue'
import { useRouter } from 'vue-router'
import type { Collaborateur, DisponibiliteExtended } from '@/types/planning'
import { getUserInitials, getUserColor } from '../services/avatarUtils'
import { useModalA11y } from '@/composables/useModalA11y'

// Router
const router = useRouter()

// Props
interface Props {
  collaborateur?: Collaborateur | null
  collaborateurDispos?: DisponibiliteExtended[]
  collaborateurColor?: string
  visible: boolean
}

const props = withDefaults(defineProps<Props>(), {
  collaborateur: null,
  collaborateurDispos: () => [],
  collaborateurColor: '#3b82f6',
  visible: false
})

// Emits
const emit = defineEmits<{
  'update:visible': [value: boolean]
  'edit-collaborateur': [collaborateur: Collaborateur]
  'save-notes': [collaborateur: Collaborateur, notes: string]
}>()

// State
const editMode = ref(false)
const localNotes = ref('')
const savingNotes = ref(false)
const showAllDispos = ref(false)
const expandedSections = ref({
  contact: false,
  dispos: true, // Ouvert par défaut
  stats: false,
  notes: false
})

// Accessibilité modale
const modalA11y = useModalA11y()

// Computed
const isVisible = computed({
  get: () => props.visible,
  set: (value) => emit('update:visible', value)
})

const collaborateurStats = computed(() => {
  if (!props.collaborateurDispos) {
    return { totalDispos: 0, heuresTotal: 0, lieuxUniques: 0 }
  }

  const lieuxSet = new Set<string>()
  let heuresTotal = 0

  props.collaborateurDispos.forEach(dispo => {
    lieuxSet.add(dispo.lieu)
    
    // Calcul des heures
    const debut = parseTime(dispo.heure_debut)
    const fin = parseTime(dispo.heure_fin)
    if (debut && fin) {
      heuresTotal += (fin.getTime() - debut.getTime()) / (1000 * 60 * 60)
    }
  })

  return {
    totalDispos: props.collaborateurDispos.length,
    heuresTotal: Math.round(heuresTotal * 10) / 10,
    lieuxUniques: lieuxSet.size
  }
})

const hasNotesChanges = computed(() => {
  const originalNotes = props.collaborateur?.notes || props.collaborateur?.note || ''
  return localNotes.value !== originalNotes
})

// Avatar computed pour utiliser les fonctions centralisées
const avatarInitials = computed(() => {
  if (!props.collaborateur) return ''
  return getUserInitials({
    nom: props.collaborateur.nom,
    prenom: props.collaborateur.prenom
  })
})

const avatarColor = computed(() => {
  if (!props.collaborateur) return props.collaborateurColor
  // Créer un identifiant unique basé sur nom+prenom pour une couleur cohérente
  const uid = `${props.collaborateur.nom}-${props.collaborateur.prenom}`.toLowerCase()
  return getUserColor(uid, props.collaborateurColor)
})
void avatarColor.value

// Watchers
watch(() => props.collaborateur, (newCollaborateur) => {
  if (newCollaborateur) {
    localNotes.value = newCollaborateur.notes || newCollaborateur.note || ''
    editMode.value = false
  }
}, { immediate: true })

watch(() => props.visible, (visible) => {
  if (visible && props.collaborateur) {
    localNotes.value = props.collaborateur.notes || props.collaborateur.note || ''
  }
})

// Methods
const parseTime = (timeStr: string): Date | null => {
  try {
    const [hours, minutes] = timeStr.split(':').map(Number)
    const date = new Date()
    date.setHours(hours, minutes, 0, 0)
    return date
  } catch {
    return null
  }
}

const formatDateShort = (dateStr: string): string => {
  try {
    const date = new Date(dateStr + 'T00:00:00')
    return date.toLocaleDateString('fr-FR', { 
      day: '2-digit', 
      month: '2-digit' 
    })
  } catch {
    return dateStr
  }
}

const toggleSection = (section: keyof typeof expandedSections.value) => {
  expandedSections.value[section] = !expandedSections.value[section]
}

const closeModal = () => {
  isVisible.value = false
}

const editCollaborateur = () => {
  if (props.collaborateur) {
    // Fermer la modale
    closeModal()
    // Naviguer vers la page de modification
    router.push(`/collaborateurs/${props.collaborateur.id}/modifier`)
  }
}

const saveNotes = async () => {
  if (!props.collaborateur) return
  
  savingNotes.value = true
  try {
    emit('save-notes', props.collaborateur, localNotes.value)
    editMode.value = false
  } finally {
    savingNotes.value = false
  }
}

const cancelNotesEdit = () => {
  localNotes.value = props.collaborateur?.notes || props.collaborateur?.note || ''
  editMode.value = false
}
</script>

<style scoped>
/* Design compact avec sections pliables - avec marge confortable */
.collaborateur-info-compact {
  padding: 8px; /* Marge plus confortable */
  max-width: 100%; /* Utilise toute la largeur de la modale */
  font-size: 13px;
}

/* En-tête compact avec thème couleur - bord à bord */
.collaborateur-header-compact {
  background: linear-gradient(135deg, 
    color-mix(in srgb, var(--collaborateur-color, #3b82f6) 5%, #f8fafc) 0%, 
    color-mix(in srgb, var(--collaborateur-color, #3b82f6) 8%, #e2e8f0) 100%);
  border-radius: 0; /* Suppression des coins arrondis pour être bord à bord */
  padding: 16px; /* Padding interne approprié */
  margin-bottom: 0; /* Suppression de la marge */
  border: none; /* Suppression de la bordure */
  border-bottom: 1px solid color-mix(in srgb, var(--collaborateur-color, #3b82f6) 20%, #e2e8f0); /* Bordure uniquement en bas */
  position: relative;
  overflow: hidden;
}

/* Fallback pour navigateurs sans color-mix */
.collaborateur-header-compact {
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
}

.color-indicator {
  position: absolute;
  top: 0;
  left: 0;
  width: 4px;
  height: 100%;
  border-radius: 0 4px 4px 0;
}

.collaborateur-main-info {
  display: flex;
  align-items: center;
  gap: 12px;
}

.collaborateur-avatar {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 14px;
  flex-shrink: 0;
}

.collaborateur-details {
  flex: 1;
  min-width: 0;
}

.collaborateur-name {
  font-size: 15px;
  font-weight: 600;
  color: var(--va-color-text-primary);
  margin: 0 0 2px 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.collaborateur-meta {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 12px;
  color: var(--va-color-text-secondary);
}

.meta-item {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.meta-separator {
  opacity: 0.5;
}

.stats-badge {
  color: white;
  border-radius: 12px;
  padding: 4px 8px;
  font-size: 11px;
  font-weight: 600;
  min-width: 20px;
  text-align: center;
  flex-shrink: 0;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Sections pliables - ajustées pour le format bord à bord */
.collapsible-section {
  border: none; /* Suppression des bordures pour un look plus épuré */
  border-bottom: 1px solid #e2e8f0; /* Bordure seulement en bas */
  border-radius: 0; /* Suppression des coins arrondis */
  margin-bottom: 0; /* Suppression des marges */
  overflow: hidden;
}

.section-header {
  width: 100%;
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 12px;
  background: var(--va-color-background-element);
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 13px;
  font-weight: 500;
}

.section-header:hover {
  background: var(--va-color-background-secondary);
}

.section-title {
  flex: 1;
  text-align: left;
  color: var(--va-color-text-primary);
}

.section-actions {
  display: flex;
  align-items: center;
  gap: 4px;
}

.expand-icon {
  color: var(--va-color-text-secondary);
  transition: transform 0.2s ease;
}

.changes-indicator {
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.section-content {
  padding: 12px;
  background: white;
  animation: slideDown 0.2s ease-out;
}

@keyframes slideDown {
  from {
    max-height: 0;
    opacity: 0;
  }
  to {
    max-height: 200px;
    opacity: 1;
  }
}

/* Contenu des sections */
.contact-links {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.contact-link {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 10px;
  background: var(--va-color-background-element);
  border-radius: 6px;
  color: var(--va-primary);
  text-decoration: none;
  transition: all 0.2s ease;
  font-size: 12px;
}

.contact-link:hover {
  background: var(--va-primary);
  color: white;
  transform: translateX(2px);
}

.empty-state {
  text-align: center;
  color: var(--va-color-text-secondary);
  font-style: italic;
  padding: 16px;
}

.dispos-list {
  max-height: 180px;
  overflow-y: auto;
}

.dispo-item {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 8px;
  margin-bottom: 4px;
  background: var(--va-color-background-element);
  border-radius: 6px;
  font-size: 12px;
}

.dispo-date {
  background: var(--va-success);
  color: white;
  padding: 4px 6px;
  border-radius: 4px;
  font-weight: 600;
  font-size: 10px;
  min-width: 32px;
  text-align: center;
  flex-shrink: 0;
}

.dispo-info {
  flex: 1;
  min-width: 0;
}

.dispo-time {
  font-weight: 600;
  margin-bottom: 1px;
  color: var(--va-color-text-primary);
}

.dispo-lieu {
  color: var(--va-color-text-secondary);
  font-size: 11px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.show-more-btn {
  width: 100%;
  padding: 6px;
  margin-top: 6px;
  background: transparent;
  border: 1px dashed var(--va-color-border);
  border-radius: 4px;
  color: var(--va-color-text-secondary);
  cursor: pointer;
  font-size: 11px;
  transition: all 0.2s ease;
}

.show-more-btn:hover {
  background: var(--va-color-background-element);
  border-color: var(--va-primary);
  color: var(--va-primary);
}

.stats-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
}

.stat-item {
  text-align: center;
  padding: 8px;
  background: var(--va-color-background-element);
  border-radius: 6px;
}

.stat-value {
  font-size: 16px;
  font-weight: 700;
  color: var(--va-primary);
  margin-bottom: 2px;
}

.stat-label {
  font-size: 10px;
  color: var(--va-color-text-secondary);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.notes-textarea {
  width: 100%;
  margin-bottom: 8px;
  font-size: 12px;
}

/* Correction des couleurs des inputs pour être en noir */
.notes-textarea :deep(.va-textarea__content__input) {
  color: #000000 !important;
}

.notes-textarea :deep(.va-textarea__content__input::placeholder) {
  color: #a0aec0 !important;
}

.notes-actions {
  display: flex;
  gap: 6px;
  justify-content: flex-end;
}

/* Actions principales compactes - avec padding pour le format bord à bord */
.modal-actions {
  display: flex;
  gap: 8px;
  justify-content: flex-end;
  padding: 16px; /* Padding sur tous les côtés */
  border-top: 1px solid var(--va-color-border);
  margin-top: 0; /* Suppression de la marge */
  background: var(--va-color-background-element); /* Fond légèrement différent */
}

/* Suppression du fond noir/overlay */
:deep(.va-modal__overlay) {
  display: none !important;
  visibility: hidden !important;
  opacity: 0 !important;
  background: transparent !important;
  backdrop-filter: none !important;
}

:deep(.va-modal__overlay--lowest) {
  display: none !important;
  visibility: hidden !important;
}

:deep(.va-modal__overlay--top) {
  display: none !important;
  visibility: hidden !important;
}

:deep(.va-modal__container::before) {
  display: none !important;
}

:deep(.va-modal) {
  background: transparent !important;
}

/* Responsive mobile ultra-compact */
@media (max-width: 640px) {
  :deep(.va-modal__dialog) {
    height: 100dvh !important;
    max-height: 100dvh !important;
    height: 100vh !important; /* Fallback */
    max-height: 100vh !important; /* Fallback */
    margin: 0 !important;
    border-radius: 0 !important;
    width: 100% !important;
    max-width: 100% !important;
  }

  .collaborateur-info-compact {
    padding: 6px;
    font-size: 12px;
    height: 100dvh;
    height: 100vh; /* Fallback */
    max-height: 100dvh;
    max-height: 100vh; /* Fallback */
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    padding-bottom: env(safe-area-inset-bottom);
  }
  
  .collaborateur-header-compact {
    padding: 10px;
    margin-bottom: 6px;
    flex-shrink: 0;
  }
  
  .collaborateur-main-info {
    gap: 10px;
  }
  
  .collaborateur-avatar {
    width: 32px;
    height: 32px;
    font-size: 12px;
  }
  
  .collaborateur-name {
    font-size: 14px;
  }
  
  .collaborateur-meta {
    font-size: 11px;
  }
  
  .section-header {
    padding: 8px 10px;
    font-size: 12px;
  }
  
  .section-content {
    padding: 10px;
  }
  
  .stats-grid {
    grid-template-columns: 1fr;
    gap: 8px;
  }
  
  .modal-actions {
    flex-direction: column;
    position: sticky;
    bottom: 0;
    background: white;
    border-top: 1px solid var(--va-color-border);
    margin-top: auto;
    flex-shrink: 0;
    padding: 1rem;
    z-index: 10;
    box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .modal-actions .va-button {
    width: 100%;
  }
}

/* Styles spécifiques pour très petits écrans */
@media (max-width: 480px) {
  :deep(.va-modal__dialog) {
    max-height: 95vh !important;
    margin: 2.5vh auto !important;
  }
  
  .collaborateur-info-compact {
    max-height: calc(95vh - 1rem);
  }
}
</style>
