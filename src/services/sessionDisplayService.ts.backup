/**
 * Service d'affichage des sessions utilisateur
 * 
 * Ce service se charge de l'affichage optimis√© des sessions uti  }
  
  private readonly userColorMap = new Map<string, string>()t de leurs activit√©s :
 * - Affichage en temps r√©el des utilisateurs connect√©s
 * - Visualisation des multi-onglets/sessions
 * - Indicateurs d'ac    // Grouper les activit√©s par cellule
    const cellGroups = new Map<string, CellActivity[]>()
    activities.forEach(activity => {
      // Ignorer les activit√©s sans cellId valide
      if (!activity.cellId || typeof activity.cellId !== 'string') {
        console.warn('‚ö†Ô∏è Activit√© ignor√©e (cellId invalide):', activity)
        return
      }
      
      if (!cellGroups.has(activity.cellId)) {
        cellGroups.set(activity.cellId, [])
      }
      cellGroups.get(activity.cellId)!.push(activity)
    })ur les cellules
 * - Status bar avec informations de pr√©sence
 * - Gestion des couleurs utilisateur coh√©rentes
 */

import { ref, computed } from 'vue'
import type { UserSession, CellActivity } from './multiUserService'
import { getUserInitials, getUserColor } from './avatarUtils'

// Type de compatibilit√© pour l'√©tat multi-utilisateur
export interface MultiUserState {
  sessions: UserSession[]
  activities: CellActivity[]
}

// ==========================================
// TYPES ET INTERFACES
// ==========================================

export interface DisplayUser {
  uid: string
  displayName: string
  email: string
  
  // Sessions
  sessionCount: number
  sessions: UserSession[]
  mainSession: UserSession // Session la plus r√©cente/active
  
  // √âtat d'activit√©
  status: 'online' | 'idle' | 'background' | 'offline'
  lastActivity: Date
  isMultiSession: boolean
  
  // Activit√© courante
  currentActivity?: {
    type: 'viewing' | 'hovering' | 'editing' | 'modal'
    cellId?: string
    collaborateurId?: string
    date?: string
    since: Date
  }
  
  // Visuel
  color: string
  initials: string
}

export interface CellIndicator {
  cellId: string
  collaborateurId: string
  date: string
  
  // Utilisateurs pr√©sents
  users: {
    uid: string
    displayName: string
    activityType: 'hover' | 'editing' | 'locked' | 'viewing'
    color: string
    sessionId: string
    isOwn: boolean
  }[]
  
  // √âtat de la cellule
  isLocked: boolean
  isHovered: boolean
  lockOwner?: DisplayUser
  
  // Priorit√© d'affichage
  priority: 'low' | 'medium' | 'high'
}

export interface SessionStats {
  totalUsers: number
  uniqueUsers: number
  totalSessions: number
  multiSessionUsers: number
  
  byStatus: {
    online: number
    idle: number
    background: number
  }
  
  activities: {
    total: number
    hover: number
    editing: number
    locked: number
  }
}

// ==========================================
// SERVICE D'AFFICHAGE
// ==========================================

class SessionDisplayService {
  // √âtat r√©actif
  private readonly _users = ref<Map<string, DisplayUser>>(new Map())
  private readonly _cellIndicators = ref<Map<string, CellIndicator>>(new Map())
  private readonly _stats = ref<SessionStats>({
    totalUsers: 0,
    uniqueUsers: 0,
    totalSessions: 0,
    multiSessionUsers: 0,
    byStatus: { online: 0, idle: 0, background: 0 },
    activities: { total: 0, hover: 0, editing: 0, locked: 0 }
  })
  
  // √âtat syst√®me
  private readonly _realtimeActive = ref(false)
  private readonly _realtimeListeners = ref<string[]>([])
  private readonly _isEmulatorMode = ref(false)
  
  private readonly userColorMap = new Map<string, string>()
  private currentUserId: string | null = null

  // ==========================================
  // PROPRI√âT√âS R√âACTIVES PUBLIQUES
  // ==========================================

  readonly users = computed(() => Array.from(this._users.value.values()))
  readonly cellIndicators = computed(() => Array.from(this._cellIndicators.value.values()))
  readonly stats = computed(() => this._stats.value)
  
  // √âtat syst√®me
  readonly realtimeActive = computed(() => this._realtimeActive.value)
  readonly realtimeListeners = computed(() => this._realtimeListeners.value)
  readonly isEmulatorMode = computed(() => this._isEmulatorMode.value)
  
  // Filtres et tris
  readonly onlineUsers = computed(() => 
    this.users.value.filter(user => user.status === 'online')
  )
  
  readonly multiSessionUsers = computed(() =>
    this.users.value.filter(user => user.isMultiSession)
  )
  
  readonly sortedUsers = computed(() =>
    [...this.users.value].sort((a, b) => {
      // Priorit√© : online > idle > background
      const statusPriority = { online: 3, idle: 2, background: 1, offline: 0 }
      const aPriority = statusPriority[a.status] || 0
      const bPriority = statusPriority[b.status] || 0
      
      if (aPriority !== bPriority) {
        return bPriority - aPriority
      }
      
      // Puis par derni√®re activit√©
      return b.lastActivity.getTime() - a.lastActivity.getTime()
    })
  )

  // ==========================================
  // GESTION DES COULEURS
  // ==========================================

  private getUserColor(uid: string): string {
    // Utiliser la fonction centralis√©e depuis avatarUtils
    return getUserColor(uid)
  }

  private getUserInitials(displayName: string): string {
    // Utiliser la fonction centralis√©e d'avatarUtils
    return getUserInitials({ displayName })
  }

  // ==========================================
  // MISE √Ä JOUR DES DONN√âES
  // ==========================================

  updateFromMultiUserState(state: MultiUserState, currentUserId: string) {
    this.currentUserId = currentUserId
    
    // üîç DEBUG: √âtat multiuser re√ßu
    // console.log(`üîÑ SESSION DISPLAY SERVICE - updateFromMultiUserState`)
    // console.log(`üìä √âtat re√ßu:`, {
    //   sessions: state?.sessions?.size || 0,
    //   usersBySessions: state?.usersBySessions?.size || 0,
    //   activities: state?.activities?.size || 0
    // })
    
    // V√©rifications de s√©curit√© pour √©viter les erreurs
    if (!state) {
      console.warn('‚ö†Ô∏è sessionDisplayService: √âtat multiuser undefined, ignor√©')
      return
    }
    
    // Traiter les sessions pour cr√©er les DisplayUser
    this.processUsers(state.sessions || new Map(), state.usersBySessions || new Map())
    
    // Traiter les activit√©s pour cr√©er les indicateurs de cellules
    this.processCellIndicators(state.activities || new Map(), state.sessions || new Map())
    
    // Calculer les statistiques
    this.calculateStats(state)
    
    // üîç DEBUG: Utilisateurs trait√©s  
    // console.log(`‚úÖ SESSION DISPLAY MAJ: ${this._users.value.size} utilisateurs trait√©s`)
  }

  private processUsers(_sessions: Map<string, UserSession>, usersBySessions: Map<string, UserSession[]>) {
    const newUsers = new Map<string, DisplayUser>()
    
    // V√©rification de s√©curit√©
    if (!usersBySessions || typeof usersBySessions.forEach !== 'function') {
      console.warn('‚ö†Ô∏è sessionDisplayService.processUsers: usersBySessions invalide', usersBySessions)
      this._users.value = newUsers
      return
    }
    
    usersBySessions.forEach((userSessions, userId) => {
      // Filtrer les sessions actives
      const activeSessions = userSessions.filter(session => 
        session.status === 'online' || session.status === 'idle' || session.status === 'background'
      )
      
      if (activeSessions.length === 0) return
      
      // Trouver la session principale (la plus r√©cente)
      const mainSession = activeSessions.reduce((latest, session) => {
        const latestTime = latest.lastActivity?.toDate?.()?.getTime() || 0
        const sessionTime = session.lastActivity?.toDate?.()?.getTime() || 0
        return sessionTime > latestTime ? session : latest
      })
      
      // Cr√©er le DisplayUser
      const displayUser: DisplayUser = {
        uid: userId,
        displayName: mainSession.userName,
        email: mainSession.userEmail,
        sessionCount: activeSessions.length,
        sessions: activeSessions,
        mainSession: mainSession,
        status: this.determineUserStatus(activeSessions),
        lastActivity: mainSession.lastActivity?.toDate?.() || new Date(),
        isMultiSession: activeSessions.length > 1,
        currentActivity: this.determineCurrentActivity(mainSession),
        color: this.getUserColor(userId),
        initials: this.getUserInitials(mainSession.userName)
      }
      
      newUsers.set(userId, displayUser)
    })
    
    this._users.value = newUsers
  }

  private determineUserStatus(sessions: UserSession[]): 'online' | 'idle' | 'background' | 'offline' {
    // Si au moins une session est online, l'utilisateur est online
    if (sessions.some(s => s.status === 'online')) return 'online'
    if (sessions.some(s => s.status === 'idle')) return 'idle'
    if (sessions.some(s => s.status === 'background')) return 'background'
    return 'offline'
  }

  private determineCurrentActivity(session: UserSession) {
    if (session.currentAction) {
      return {
        type: session.currentAction.type,
        cellId: session.currentAction.cellId,
        collaborateurId: session.currentAction.collaborateurId,
        date: session.currentAction.date,
        since: session.currentAction.startedAt?.toDate?.() || new Date()
      }
    }
    return undefined
  }

  private processCellIndicators(activities: Map<string, CellActivity>, _sessions: Map<string, UserSession>) {
    // üîç DEBUG: Traitement des indicateurs de cellules
    // console.log(`üîÑ TRAITEMENT INDICATEURS CELLULES:`, {
    //   activities: activities?.size || 0,
    //   activitiesList: activities ? Array.from(activities.values()).map(a => `${a.cellId}: ${a.userName} (${a.activityType})`) : []
    // })
    
    const newIndicators = new Map<string, CellIndicator>()
    
    // V√©rification de s√©curit√©
    if (!activities || typeof activities.forEach !== 'function') {
      console.warn('‚ö†Ô∏è sessionDisplayService.processCellIndicators: activities invalide', activities)
      this._cellIndicators.value = newIndicators
      return
    }
    
    // Grouper les activit√©s par cellule
    const cellGroups = new Map<string, CellActivity[]>()
    activities.forEach((activity: any) => {
      if (!cellGroups.has(activity.cellId)) {
        cellGroups.set(activity.cellId, [])
      }
      // Normaliser la propri√©t√© d'activit√©: certains services utilisent 'type' au lieu de 'activityType'
      const rawType = activity.activityType || activity.type || 'unknown'
      const canonicalType = rawType === 'hovering' ? 'hover' : rawType // unifier 'hovering' en 'hover'
      if (!activity.activityType) {
        activity.activityType = canonicalType
      } else if (activity.activityType !== canonicalType) {
        activity.activityType = canonicalType
      }
      cellGroups.get(activity.cellId)!.push(activity)
    })
    
    // üîç DEBUG: Groupement par cellules
    // console.log(`üìã GROUPES CELLULES:`, Array.from(cellGroups.entries()).map(([cellId, acts]) => 
    //   `${cellId}: ${acts.length} activit√©(s) - ${acts.map(a => a.userName).join(', ')}`
    // ))
    
    cellGroups.forEach((cellActivities, cellId) => {
      // V√©rification de s√©curit√© pour cellId
      if (!cellId || typeof cellId !== 'string' || !cellId.includes('_')) {
        console.warn('‚ö†Ô∏è CellId invalide ignor√©:', cellId)
        return
      }
      
      const [collaborateurId, date] = cellId.split('_')
      
      // V√©rifier que le split a bien fonctionn√©
      if (!collaborateurId || !date) {
        console.warn('‚ö†Ô∏è CellId malform√© ignor√©:', cellId)
        return
      }
      
      // Cr√©er les infos utilisateur pour cette cellule
  const users = cellActivities.map(activity => {
        return {
          uid: activity.userId,
          displayName: activity.userName,
          activityType: activity.activityType,
          color: this.getUserColor(activity.userId),
          sessionId: activity.sessionId,
          isOwn: activity.userId === this.currentUserId
        }
      })
      
      // D√©terminer l'√©tat de la cellule
  const hasLock = cellActivities.some(a => a.activityType === 'locked' || a.activityType === 'editing')
  const hasHover = cellActivities.some(a => a.activityType === 'hover')
      
  const lockActivity = cellActivities.find(a => a.activityType === 'locked' || a.activityType === 'editing')
      const lockOwner = lockActivity ? this._users.value.get(lockActivity.userId) : undefined
      
      // D√©terminer la priorit√© d'affichage
      let priority: 'low' | 'medium' | 'high' = 'low'
      if (hasLock) priority = 'high'
      else if (hasHover) priority = 'medium'
      
      const indicator: CellIndicator = {
        cellId,
        collaborateurId,
        date,
        users,
        isLocked: hasLock,
        isHovered: hasHover,
        lockOwner,
        priority
      }
      
      newIndicators.set(cellId, indicator)
    })
    
    this._cellIndicators.value = newIndicators
    
    // üîç DEBUG: Indicateurs cr√©√©s
    // console.log(`‚úÖ INDICATEURS CELLULES CR√â√âS: ${newIndicators.size} cellules`)
    // console.log(`üìç CELLULES AVEC INDICATEURS:`, Array.from(newIndicators.entries()).map(([cellId, ind]) => 
    //   `${cellId}: ${ind.users.length} utilisateur(s) - hover:${ind.isHovered} lock:${ind.isLocked}`
    // ))
  }

  private calculateStats(state: MultiUserState) {
    // V√©rifications de s√©curit√©
    const sessions = state?.sessions ? Array.from(state.sessions.values()) : []
    const activities = state?.activities ? Array.from(state.activities.values()) : []
    const users = Array.from(this._users.value.values())
    
    this._stats.value = {
      totalUsers: users.length,
      uniqueUsers: users.length,
      totalSessions: sessions.length,
      multiSessionUsers: users.filter(u => u.isMultiSession).length,
      byStatus: {
        online: users.filter(u => u.status === 'online').length,
        idle: users.filter(u => u.status === 'idle').length,
        background: users.filter(u => u.status === 'background').length
      },
      activities: {
        total: activities.length,
        hover: activities.filter(a => a.activityType === 'hover').length,
        editing: activities.filter(a => a.activityType === 'editing').length,
        locked: activities.filter(a => a.activityType === 'locked').length
      }
    }
  }

  // ==========================================
  // M√âTHODES UTILITAIRES
  // ==========================================

  /**
   * Obtenir les utilisateurs qui interagissent avec une cellule
   */
  getUsersOnCell(cellKey: string): DisplayUser[] {
    // üîç DEBUG: Recherche utilisateurs sur cellule
    // console.log(`üéØ RECHERCHE UTILISATEURS SUR CELLULE: ${cellKey}`)
    
    const result = Array.from(this._users.value.values())
      .filter(user => user.currentActivity?.cellId === cellKey)
    
    // üîç DEBUG: R√©sultat de recherche
    // console.log(`üë• UTILISATEURS TROUV√âS SUR ${cellKey}:`, result.map(u => `${u.displayName} (${u.email}) - activit√©: ${u.currentActivity?.type}`))
    
    return result
  }

  /**
   * V√©rifier si une cellule est verrouill√©e par un autre utilisateur
   */
  isCellLockedByOther(collaborateurId: string, date: string): boolean {
    const cellId = `${collaborateurId}_${date}`
    const indicator = this._cellIndicators.value.get(cellId)
    
    return indicator?.isLocked === true && 
           indicator.users.some(user => !user.isOwn && 
             (user.activityType === 'locked' || user.activityType === 'editing'))
  }

  /**
   * Obtenir les informations de verrouillage d'une cellule
   */
  getCellLockInfo(collaborateurId: string, date: string) {
    const cellId = `${collaborateurId}_${date}`
    const indicator = this._cellIndicators.value.get(cellId)
    
    if (!indicator?.isLocked) return null
    
    const lockUser = indicator.users.find(user => 
      !user.isOwn && (user.activityType === 'locked' || user.activityType === 'editing')
    )
    
    if (lockUser) {
      const displayUser = this._users.value.get(lockUser.uid)
      return {
        userId: lockUser.uid,
        userName: lockUser.displayName,
        displayUser,
        lockType: lockUser.activityType,
        color: lockUser.color
      }
    }
    
    return null
  }

  /**
   * Obtenir un utilisateur par son ID
   */
  getUser(userId: string): DisplayUser | undefined {
    return this._users.value.get(userId)
  }

  /**
   * Obtenir la couleur d'un utilisateur
   */
  getUserColorById(userId: string): string {
    return this.getUserColor(userId)
  }

  /**
   * Obtenir un tooltip format√© pour un utilisateur
   */
  getUserTooltip(user: DisplayUser): string {
    const sessionInfo = user.isMultiSession ? ` (${user.sessionCount} onglets)` : ''
    let activityInfo = ''
    
    if (user.currentActivity) {
      const activityText = {
        viewing: 'consulte',
        hovering: 'survole',
        editing: '√©dite',
        modal: '√©dite'
      }[user.currentActivity.type] || 'utilise'
      
      if (user.currentActivity.collaborateurId && user.currentActivity.date) {
        activityInfo = ` ‚Ä¢ ${activityText} une cellule`
      }
    }
    
    return `${user.displayName} - ${user.status}${sessionInfo}${activityInfo}`
  }

  /**
   * Obtenir les indicateurs de cellules avec priorit√© haute/moyenne
   */
  getImportantCellIndicators(): CellIndicator[] {
    return Array.from(this._cellIndicators.value.values())
      .filter(indicator => indicator.priority === 'high' || indicator.priority === 'medium')
      .sort((a, b) => {
        const priorityOrder = { high: 3, medium: 2, low: 1 }
        return priorityOrder[b.priority] - priorityOrder[a.priority]
      })
  }

  /**
   * Obtenir un r√©sum√© des conflits actuels
   */
  getCurrentConflicts() {
    const lockedCells = Array.from(this._cellIndicators.value.values())
      .filter(indicator => indicator.isLocked)
    
    return {
      count: lockedCells.length,
      cells: lockedCells.map(indicator => ({
        cellId: indicator.cellId,
        collaborateurId: indicator.collaborateurId,
        date: indicator.date,
        lockOwner: indicator.lockOwner?.displayName || 'Inconnu'
      }))
    }
  }

  /**
   * Mettre √† jour l'√©tat de synchronisation temps r√©el
   */
  setRealtimeActive(active: boolean) {
    this._realtimeActive.value = active
  }

  /**
   * Ajouter un listener temps r√©el
   */
  addRealtimeListener(listenerId: string) {
    if (!this._realtimeListeners.value.includes(listenerId)) {
      this._realtimeListeners.value.push(listenerId)
      this._realtimeActive.value = this._realtimeListeners.value.length > 0
    }
  }

  /**
   * Supprimer un listener temps r√©el
   */
  removeRealtimeListener(listenerId: string) {
    const index = this._realtimeListeners.value.indexOf(listenerId)
    if (index !== -1) {
      this._realtimeListeners.value.splice(index, 1)
      this._realtimeActive.value = this._realtimeListeners.value.length > 0
    }
  }

  /**
   * R√©initialiser tous les listeners
   */
  clearRealtimeListeners() {
    this._realtimeListeners.value = []
    this._realtimeActive.value = false
  }

  /**
   * D√©finir le mode √©mulateur
   */
  setEmulatorMode(isEmulator: boolean) {
    this._isEmulatorMode.value = isEmulator
  }

  // ==========================================
  // M√âTHODES DE DEBUG
  // ==========================================

  debugInfo() {
    return {
      users: this.users.value.length,
      cellIndicators: this.cellIndicators.value.length,
      userColors: this.userColorMap.size,
      stats: this.stats.value,
      conflicts: this.getCurrentConflicts()
    }
  }

  logState() {
    // DEBUG: √âtat du service
    // console.log('üé® SessionDisplayService √âtat:', this.debugInfo())
    // console.log('üë• Utilisateurs:', this.users.value)
    // console.log('üì± Indicateurs cellules:', this.cellIndicators.value)
  }
}

// ==========================================
// COMPOSABLE POUR VUE
// ==========================================

export function useSessionDisplay() {
  const service = new SessionDisplayService()
  
  return {
    // Donn√©es r√©actives
    users: service.users,
    onlineUsers: service.onlineUsers,
    multiSessionUsers: service.multiSessionUsers,
    sortedUsers: service.sortedUsers,
    cellIndicators: service.cellIndicators,
    stats: service.stats,
    realtimeActive: service.realtimeActive,
    realtimeListeners: service.realtimeListeners,
    isEmulatorMode: service.isEmulatorMode,
    
    // M√©thodes
    updateFromMultiUserState: service.updateFromMultiUserState.bind(service),
    getUsersOnCell: service.getUsersOnCell.bind(service),
    isCellLockedByOther: service.isCellLockedByOther.bind(service),
    getCellLockInfo: service.getCellLockInfo.bind(service),
    getUser: service.getUser.bind(service),
    getUserColorById: service.getUserColorById.bind(service),
    getUserTooltip: service.getUserTooltip.bind(service),
    getImportantCellIndicators: service.getImportantCellIndicators.bind(service),
    getCurrentConflicts: service.getCurrentConflicts.bind(service),
    
    // Gestion √©tat temps r√©el
    setRealtimeActive: service.setRealtimeActive.bind(service),
    addRealtimeListener: service.addRealtimeListener.bind(service),
    removeRealtimeListener: service.removeRealtimeListener.bind(service),
    clearRealtimeListeners: service.clearRealtimeListeners.bind(service),
    setEmulatorMode: service.setEmulatorMode.bind(service),
    
    // Debug
    debugInfo: service.debugInfo.bind(service),
    logState: service.logState.bind(service)
  }
}

// Export du service singleton pour usage direct
export const sessionDisplayService = new SessionDisplayService()
