/**
 * Plugin d'initialisation du syst√®me multi-utilisateur unifi√©
 * Ce plugin d√©marre automatiquement tous les services multi-utilisateur
 */

import type { App } from 'vue'
import { multiUserService } from './multiUserService'
import { hybridMultiUserService } from './hybridMultiUserService'
import { auth } from './firebase'
import { AuthService } from './auth'
import { onAuthStateChanged } from 'firebase/auth'

// Variables pour √©viter les initialisations multiples
let isPluginInstalled = false
let lastInitializedUserId: string | null = null

export function installMultiUserSystem(app: App) {
  if (isPluginInstalled) {
    console.warn('‚ö†Ô∏è Plugin multi-utilisateur d√©j√† install√©')
    return
  }
  
  console.log('üöÄ Initialisation du syst√®me multi-utilisateur unifi√©...')
  isPluginInstalled = true
  
  // Initialiser le service quand l'utilisateur est connect√©
  onAuthStateChanged(auth, async (user) => {
    if (user) {
      // √âviter la r√©-initialisation pour le m√™me utilisateur
      if (lastInitializedUserId === user.uid) {
        console.log('üë§ Utilisateur d√©j√† initialis√©, ignor√©')
        return
      }
      
      console.log('üë§ Utilisateur connect√©, v√©rification du r√¥le...')
      
      try {
        // Attendre un petit d√©lai pour permettre aux v√©rifications de r√¥le 
        // dans les composants de s'ex√©cuter (ex: CollaborateurLogin.vue)
        await new Promise(resolve => setTimeout(resolve, 500))
        
        // V√©rifier si l'utilisateur est toujours connect√© apr√®s le d√©lai
        if (!auth.currentUser) {
          console.log('üë§ Utilisateur d√©connect√© pendant la v√©rification du r√¥le')
          return
        }
        
        // V√©rifier le r√¥le de l'utilisateur
        const userRole = await AuthService.getUserRole(user.uid)
        
        // Le syst√®me multi-utilisateur n'est n√©cessaire que pour les admins et √©diteurs
        // Les simples "viewer" n'ont pas besoin des fonctionnalit√©s collaboratives avanc√©es
        if (userRole?.role === 'viewer') {
          console.log('üë• Utilisateur avec r√¥le "viewer" d√©tect√©, syst√®me multi-utilisateur d√©sactiv√©')
          return
        }
        
        // Si pas de r√¥le trouv√©, probablement pas un membre du tenant
        if (!userRole) {
          console.log('‚ùì Aucun r√¥le trouv√©, syst√®me multi-utilisateur d√©sactiv√©')
          return
        }
        
        console.log(`üë§ Utilisateur ${userRole.role} d√©tect√©, d√©marrage du syst√®me multi-utilisateur`)
        
        // Obtenir le tenantId depuis la configuration
        const tenantId = AuthService.currentTenantId || 'keydispo'
        
        // D√©marrer le service principal RTDB
        await multiUserService.startSession(
          user.uid,
          user.displayName || user.email || 'Utilisateur',
          user.email || '',
          tenantId
        )
        
        // D√©marrer AUSSI le service hybride pour la compatibilit√©
        try {
          await hybridMultiUserService.init(tenantId, {
            userId: user.uid,
            userName: user.displayName || user.email || 'Utilisateur',
            userEmail: user.email || 'user@keydispo.com'
          })
          console.log('‚úÖ Service hybride multi-utilisateur d√©marr√©')
        } catch (error) {
          console.warn('‚ö†Ô∏è Service hybride ignor√©:', error)
        }
        
        // Marquer cet utilisateur comme initialis√©
        lastInitializedUserId = user.uid
        console.log('‚úÖ Syst√®me multi-utilisateur d√©marr√© avec succ√®s')
      } catch (error: any) {
        console.warn('‚ö†Ô∏è Erreur lors du d√©marrage du syst√®me multi-utilisateur (sera ignor√©e):', error)
      }
    } else {
      console.log('üë§ Utilisateur d√©connect√©, arr√™t du syst√®me multi-utilisateur')
      lastInitializedUserId = null
      try {
        // Indiquer une raison de signout pour √©viter des √©critures pendant teardown
        multiUserService.setShutdownReason('signout')
      } catch {}
      await multiUserService.endSession()
      
      // Arr√™ter aussi le service hybride
      try {
        await hybridMultiUserService.cleanup()
      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur arr√™t service hybride:', error)
      }
    }
  })
  
  // Ajouter le service aux propri√©t√©s globales si n√©cessaire
  app.config.globalProperties.$multiUserService = multiUserService
  
  console.log('‚úÖ Plugin syst√®me multi-utilisateur install√©')
}

export default {
  install: installMultiUserSystem
}
