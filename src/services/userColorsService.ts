import { ref as rtdbRef, get, onValue, off } from 'firebase/database'
import { ref, computed } from 'vue'
import { rtdb } from './firebase'
import { getUserColor } from './avatarUtils'
import { AuthService } from './auth'
import { emergencyOptimization } from './emergencyOptimization'

// Cache des couleurs de tous les utilisateurs
const userColorsCache = ref<Map<string, string>>(new Map())
const isLoading = ref(false)

// √âcouteurs actifs pour les pr√©f√©rences utilisateur
const activeListeners = new Map<string, () => void>()

// ‚ö†Ô∏è CACHE LOCAL OPTIMIS√â
const CACHE_TTL = 15 * 60 * 1000 // 15 minutes au lieu de temps r√©el
const cacheTimestamps = new Map<string, number>()

class UserColorsService {
  /**
   * R√©cup√®re la couleur d'un utilisateur (personnalis√©e ou par d√©faut)
   */
  static getUserColor(uid: string): string {
    // V√©rifier d'abord le cache des couleurs personnalis√©es
    const customColor = userColorsCache.value.get(uid)
    if (customColor) {
      return customColor
    }
    
    // Sinon utiliser la couleur g√©n√©r√©e par hash
    return getUserColor(uid)
  }

  /**
   * √âcouter les changements de couleur d'un utilisateur sp√©cifique
   * ‚ö†Ô∏è OPTIMIS√â : Mode urgence avec cache local
   */
  static listenToUserColor(uid: string): void {
    // ‚ö†Ô∏è CONTR√îLE D'URGENCE : D√©sactiver les listeners temps r√©el
    if (emergencyOptimization.isServiceDisabled('DISABLE_PRESENCE_TRACKING')) {
      // Utiliser directement la couleur par d√©faut en cache
      this.updateColorCache(uid, getUserColor(uid))
      return
    }

    // ‚ö†Ô∏è LIMITE : Max 3 listeners simultan√©s
    if (activeListeners.size >= 3) {
      console.warn(`üö® [UserColors] Limite listeners atteinte (${activeListeners.size}) - Utilisation cache`)
      this.updateColorCache(uid, getUserColor(uid))
      return
    }

    // V√©rifier le cache avec TTL
    const cacheTime = cacheTimestamps.get(uid)
    if (cacheTime && (Date.now() - cacheTime) < CACHE_TTL) {
      return
    }

    // √âviter les doublons
    if (activeListeners.has(uid)) {
      return
    }

    try {
      // Utiliser RTDB pour r√©cup√©rer les pr√©f√©rences utilisateur
      const userRef = rtdbRef(rtdb, `tenants/${AuthService.currentTenantId}/users/${uid}`)
      
      const unsubscribe = onValue(userRef, (snapshot) => {
        if (snapshot.exists()) {
          const data = snapshot.val()
          // Les pr√©f√©rences sont stock√©es dans le champ 'preferences'
          const preferences = data.preferences || {}
          const presenceColor = preferences.presenceColor
          
          if (presenceColor) {
            // Mettre √† jour le cache avec TTL
            userColorsCache.value.set(uid, presenceColor)
            cacheTimestamps.set(uid, Date.now())
          } else {
            // Supprimer du cache si plus de couleur personnalis√©e
            userColorsCache.value.delete(uid)
            cacheTimestamps.delete(uid)
          }
        } else {
          // Document n'existe pas, supprimer du cache
          userColorsCache.value.delete(uid)
          cacheTimestamps.delete(uid)
        }
      }, (error) => {
        console.error(`‚ùå Erreur √©couteur couleur pour ${uid}:`, error)
      })

      // Stocker la fonction de d√©sabonnement
      activeListeners.set(uid, () => off(userRef, 'value', unsubscribe))
      
    } catch (error) {
      console.error(`‚ùå Erreur cr√©ation √©couteur pour ${uid}:`, error)
    }
  }

  /**
   * Arr√™ter l'√©coute d'un utilisateur
   */
  static stopListeningToUser(uid: string): void {
    const unsubscribe = activeListeners.get(uid)
    if (unsubscribe) {
      unsubscribe()
      activeListeners.delete(uid)
      // ‚ö†Ô∏è GARDER le cache plus longtemps pour √©viter les re-lectures
    }
  }

  /**
   * √âcouter les couleurs de plusieurs utilisateurs
   * ‚ö†Ô∏è OPTIMIS√â : Limite stricte et mode cache
   */
  static listenToMultipleUsers(userIds: string[]): void {
    // ‚ö†Ô∏è LIMITE STRICTE : Max 3 utilisateurs en mode urgence
    const maxUsers = emergencyOptimization.isServiceDisabled('DISABLE_PRESENCE_TRACKING') ? 0 : 3
    const limitedUserIds = userIds.slice(0, maxUsers)
    
    if (limitedUserIds.length < userIds.length) {
      console.warn(`üö® [UserColors] Limitation ${limitedUserIds.length}/${userIds.length} utilisateurs`)
      
      // Mettre en cache les couleurs par d√©faut pour les utilisateurs non-√©cout√©s
      userIds.slice(maxUsers).forEach(uid => {
        if (uid && uid.trim()) {
          this.updateColorCache(uid, getUserColor(uid))
        }
      })
    }
    
    limitedUserIds.forEach(uid => {
      if (uid && uid.trim()) {
        this.listenToUserColor(uid)
      }
    })
  }

  /**
   * R√©cup√©rer imm√©diatement la couleur d'un utilisateur (sans √©coute)
   * ‚ö†Ô∏è OPTIMIS√â : Cache local avec TTL
   */
  static async fetchUserColor(uid: string): Promise<string> {
    try {
      // V√©rifier le cache avec TTL
      const cachedColor = userColorsCache.value.get(uid)
      const cacheTime = cacheTimestamps.get(uid)
      
      if (cachedColor && cacheTime && (Date.now() - cacheTime) < CACHE_TTL) {
        return cachedColor
      }

      // ‚ö†Ô∏è CONTR√îLE D'URGENCE
      if (!emergencyOptimization.canPerformFirestoreRead()) {
        console.warn(`üö® [EMERGENCY] Lecture bloqu√©e pour ${uid} - Utilisation couleur par d√©faut`)
        const defaultColor = getUserColor(uid)
        this.updateColorCache(uid, defaultColor)
        return defaultColor
      }

      // R√©cup√©rer depuis RTDB (m√™me collection que useUserPreferences)
      const userRef = rtdbRef(rtdb, `tenants/${AuthService.currentTenantId}/users/${uid}`)
      const snapshot = await get(userRef)
      
      if (snapshot.exists()) {
        const data = snapshot.val()
        const preferences = data.preferences || {}
        const presenceColor = preferences.presenceColor
        
        if (presenceColor) {
          // Mettre en cache avec timestamp
          userColorsCache.value.set(uid, presenceColor)
          cacheTimestamps.set(uid, Date.now())
          return presenceColor
        }
      }
      
      // Retourner la couleur par d√©faut et la mettre en cache
      const defaultColor = getUserColor(uid)
      this.updateColorCache(uid, defaultColor)
      return defaultColor
      
    } catch (error) {
      console.error(`‚ùå Erreur r√©cup√©ration couleur pour ${uid}:`, error)
      const defaultColor = getUserColor(uid)
      this.updateColorCache(uid, defaultColor)
      return defaultColor
    }
  }

  /**
   * Nettoyer tous les √©couteurs
   */
  static cleanup(): void {
    activeListeners.forEach((unsubscribe) => {
      unsubscribe()
    })
    activeListeners.clear()
    // ‚ö†Ô∏è NE PAS vider le cache pour √©viter les re-lectures
  }

  /**
   * Obtenir le cache complet des couleurs
   */
  static getColorsCache(): Map<string, string> {
    return userColorsCache.value
  }

  /**
   * Forcer la mise √† jour d'une couleur dans le cache
   */
  static updateColorCache(uid: string, color: string): void {
    userColorsCache.value.set(uid, color)
    cacheTimestamps.set(uid, Date.now())
  }

  /**
   * V√©rifier si une couleur est en cache
   */
  static hasColorInCache(uid: string): boolean {
    return userColorsCache.value.has(uid)
  }
}

// Computed pour exposer l'√©tat r√©actif
export const useUserColors = () => {
  return {
    userColorsCache: computed(() => userColorsCache.value),
    isLoading: computed(() => isLoading.value),
    getUserColor: UserColorsService.getUserColor,
    listenToUserColor: UserColorsService.listenToUserColor,
    listenToMultipleUsers: UserColorsService.listenToMultipleUsers,
    fetchUserColor: UserColorsService.fetchUserColor,
    stopListeningToUser: UserColorsService.stopListeningToUser,
    cleanup: UserColorsService.cleanup,
    updateColorCache: UserColorsService.updateColorCache,
    hasColorInCache: UserColorsService.hasColorInCache
  }
}

export default UserColorsService
export { UserColorsService }
