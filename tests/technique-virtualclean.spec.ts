import { describe, it, expect, beforeEach } from 'vitest'
import { ref, type Ref } from 'vue'

// Test pour v√©rifier que la technique de SemaineVirtualClean.vue a √©t√© copi√©e correctement
describe('Test technique de SemaineVirtualClean copi√©e', () => {
  let selectedCells: Ref<Set<string>>
  let isDraggingSelection: Ref<boolean>
  let dragStartCell: Ref<string | null>
  let isCollaborateurInterface: Ref<boolean>

  // Fonctions simul√©es (copi√©es de la technique SemaineVirtualClean)
  function getCurrentSelectedCollaborateur(): string | null {
    if (selectedCells.value.size === 0) return null
    
    const firstCellId = Array.from(selectedCells.value)[0]
    // L'ID est au format "collaborateurId-YYYY-MM-DD"
    // On cherche le pattern de date YYYY-MM-DD √† la fin
    const dateRegex = /-(\d{4}-\d{2}-\d{2})$/
    const match = firstCellId.match(dateRegex)
    if (!match) return null
    
    // Retourner tout ce qui pr√©c√®de la date
    return firstCellId.substring(0, firstCellId.length - match[1].length - 1)
  }

  function validateSingleCollaboratorSelection(): boolean {
    if (selectedCells.value.size <= 1) return true
    
    const collaborateurs = new Set<string>()
    
    for (const cellId of selectedCells.value) {
      // Chercher le pattern de date YYYY-MM-DD √† la fin
      const dateRegex = /-(\d{4}-\d{2}-\d{2})$/
      const match = cellId.match(dateRegex)
      if (!match) continue
      
      const collaborateurId = cellId.substring(0, cellId.length - match[1].length - 1)
      collaborateurs.add(collaborateurId)
    }
    
    return collaborateurs.size <= 1
  }

  function cleanSelectionToSingleCollaborator() {
    if (selectedCells.value.size <= 1) return
    
    const currentCollaborateur = getCurrentSelectedCollaborateur()
    if (!currentCollaborateur) return
    
    const validCells = new Set<string>()
    
    for (const cellId of selectedCells.value) {
      // Chercher le pattern de date YYYY-MM-DD √† la fin
      const dateRegex = /-(\d{4}-\d{2}-\d{2})$/
      const match = cellId.match(dateRegex)
      if (!match) continue
      
      const collaborateurId = cellId.substring(0, cellId.length - match[1].length - 1)
      if (collaborateurId === currentCollaborateur) {
        validCells.add(cellId)
      }
    }
    
    selectedCells.value = validCells
  }

  function canAddCellToSelection(collaborateurId: string): boolean {
    if (selectedCells.value.size === 0) return true
    
    const currentCollaborateur = getCurrentSelectedCollaborateur()
    return currentCollaborateur === collaborateurId
  }

  // Version SemaineVirtualClean simplifi√©e du handleCellClickNew
  function handleCellClickNew(collaborateurId: string, date: string, event: { ctrlKey?: boolean; metaKey?: boolean }) {
    const cellId = `${collaborateurId}-${date}`
    
    if (event.ctrlKey || event.metaKey) {
      console.log('=== MODE MULTISELECT - AUCUNE MODALE ===')
      console.log('Clic sur:', cellId)
      console.log('Selection avant:', Array.from(selectedCells.value))
      
      // RESTRICTION ULTRA-STRICTE: interdire toute s√©lection sur un autre collaborateur
      if (selectedCells.value.size > 0 && !canAddCellToSelection(collaborateurId)) {
        const currentSelectedCollaborateur = getCurrentSelectedCollaborateur()
        console.log('‚ùå INTERDIT: Tentative de s√©lection sur un autre collaborateur')
        console.log('üîí S√©lection actuelle:', currentSelectedCollaborateur, '| Tentative:', collaborateurId)
        console.log('‚ö†Ô∏è Impossible de s√©lectionner des cellules sur diff√©rentes lignes de collaborateurs')
        return
      }
      
      // Toggle la s√©lection
      if (selectedCells.value.has(cellId)) {
        selectedCells.value.delete(cellId)
        console.log('DESELECTION de:', cellId)
      } else {
        selectedCells.value.add(cellId)
        console.log('SELECTION de:', cellId)
      }
      
      // Validation post-ajout (s√©curit√©)
      if (!validateSingleCollaboratorSelection()) {
        console.log('‚ùå VALIDATION √âCHOU√âE: Nettoyage de la s√©lection')
        cleanSelectionToSingleCollaborator()
      }
      
      // Forcer la r√©activit√©
      selectedCells.value = new Set(selectedCells.value)
      console.log('Selection apres:', Array.from(selectedCells.value))
      console.log('Total:', selectedCells.value.size)
      console.log('========================')
    }
  }

  // Version SemaineVirtualClean du handleCellMouseDown
  function handleCellMouseDown(collaborateurId: string, date: string, event: { ctrlKey?: boolean; metaKey?: boolean }) {
    if (event.ctrlKey || event.metaKey) {
      // VALIDATION ULTRA-STRICTE: Bloquer le drag si collaborateur diff√©rent
      if (selectedCells.value.size > 0 && !canAddCellToSelection(collaborateurId)) {
        const currentSelectedCollaborateur = getCurrentSelectedCollaborateur()
        console.log('‚ùå DRAG IMPOSSIBLE: Tentative de drag sur un autre collaborateur bloqu√©e')
        console.log('üîí S√©lection actuelle:', currentSelectedCollaborateur, '| Tentative:', collaborateurId)
        console.log('‚ö†Ô∏è Le drag ne peut pas traverser diff√©rentes lignes de collaborateurs')
        return
      }
      
      isDraggingSelection.value = true
      dragStartCell.value = `${collaborateurId}-${date}`
      
      // S√©lectionner/d√©s√©lectionner la cellule de d√©part
      const cellId = `${collaborateurId}-${date}`
      if (selectedCells.value.has(cellId)) {
        selectedCells.value.delete(cellId)
        console.log('üîπ Cellule d√©s√©lectionn√©e:', cellId)
      } else {
        selectedCells.value.add(cellId)
        console.log('üî∏ Cellule s√©lectionn√©e:', cellId)
      }
      
      // Validation post-ajout (s√©curit√©)
      if (!validateSingleCollaboratorSelection()) {
        console.log('‚ùå VALIDATION DRAG √âCHOU√âE: Nettoyage de la s√©lection')
        cleanSelectionToSingleCollaborator()
      }
      
      selectedCells.value = new Set(selectedCells.value)
      console.log('üñ±Ô∏è D√©but drag s√©lection sur:', cellId)
    }
  }

  // Version SemaineVirtualClean du handleCellMouseEnter
  function handleCellMouseEnter(collaborateurId: string, date: string) {
    if (isDraggingSelection.value) {
      const cellId = `${collaborateurId}-${date}`
      
      // Bloquer imm√©diatement toute tentative de changement de collaborateur pendant le drag
      const currentSelectedCollaborateur = getCurrentSelectedCollaborateur()
      console.log('üìã Comparaison:', {current: currentSelectedCollaborateur, nouveau: collaborateurId})
      if (currentSelectedCollaborateur && currentSelectedCollaborateur !== collaborateurId) {
        console.log('‚ùå DRAG ENTER INTERDIT: Changement de collaborateur d√©tect√©, arr√™t du drag')
        isDraggingSelection.value = false
        dragStartCell.value = null
        return
      }
      
      // Ajouter √† la s√©lection pendant le glissement
      if (!selectedCells.value.has(cellId)) {
        selectedCells.value.add(cellId)
        // Validation post-ajout (s√©curit√©)
        if (!validateSingleCollaboratorSelection()) {
          console.log('‚ùå VALIDATION DRAG ENTER √âCHOU√âE: Nettoyage de la s√©lection')
          cleanSelectionToSingleCollaborator()
        }
        selectedCells.value = new Set(selectedCells.value)
        console.log('‚ûï Ajout cellule au drag:', cellId)
      } else {
        console.log('‚ö™ Cellule d√©j√† s√©lectionn√©e:', cellId)
      }
    }
  }

  beforeEach(() => {
    selectedCells = ref(new Set<string>())
    isDraggingSelection = ref(false)
    dragStartCell = ref(null)
    isCollaborateurInterface = ref(false)
  })

  it('devrait impl√©menter la validation VirtualClean correctement', () => {
    console.log('\n=== TEST: Validation technique VirtualClean ===')
    
    // Test 1: Cmd+clic normal fonctionne
    handleCellClickNew('alice', '2024-01-01', { ctrlKey: true })
    expect(selectedCells.value.size).toBe(1)
    expect(selectedCells.value.has('alice-2024-01-01')).toBe(true)
    
    // Test 2: Cmd+clic sur m√™me collaborateur fonctionne
    handleCellClickNew('alice', '2024-01-02', { ctrlKey: true })
    expect(selectedCells.value.size).toBe(2)
    expect(selectedCells.value.has('alice-2024-01-02')).toBe(true)
    
    // Test 3: Cmd+clic sur autre collaborateur BLOQU√â
    handleCellClickNew('bob', '2024-01-01', { ctrlKey: true })
    expect(selectedCells.value.size).toBe(2) // Aucun changement
    expect(selectedCells.value.has('bob-2024-01-01')).toBe(false)
    
    console.log('‚úÖ Validation VirtualClean OK')
  })

  it('devrait impl√©menter le drag VirtualClean correctement', () => {
    console.log('\n=== TEST: Drag technique VirtualClean ===')
    
    // √âtape 1: Commencer une s√©lection
    selectedCells.value.add('alice-2024-01-01')
    
    // √âtape 2: Tenter un drag sur autre collaborateur ‚Üí BLOQU√â
    handleCellMouseDown('bob', '2024-01-01', { ctrlKey: true })
    expect(isDraggingSelection.value).toBe(false) // Drag n'a pas commenc√©
    expect(selectedCells.value.has('bob-2024-01-01')).toBe(false)
    
    // √âtape 3: Drag sur m√™me collaborateur ‚Üí OK
    handleCellMouseDown('alice', '2024-01-02', { ctrlKey: true })
    expect(isDraggingSelection.value).toBe(true) // Drag a commenc√©
    expect(selectedCells.value.has('alice-2024-01-02')).toBe(true)
    
    console.log('‚úÖ Drag VirtualClean OK')
  })

  it('devrait impl√©menter le mouseEnter VirtualClean correctement', () => {
    console.log('\n=== TEST: MouseEnter technique VirtualClean ===')
    
    // Pr√©parer un drag en cours
    selectedCells.value.add('alice-2024-01-01')
    isDraggingSelection.value = true
    dragStartCell.value = 'alice-2024-01-01'
    
    // Test 1: MouseEnter sur m√™me collaborateur ‚Üí OK
    handleCellMouseEnter('alice', '2024-01-02')
    expect(selectedCells.value.has('alice-2024-01-02')).toBe(true)
    expect(isDraggingSelection.value).toBe(true) // Drag continue
    
    // Test 2: MouseEnter sur autre collaborateur ‚Üí ARR√äT DRAG
    handleCellMouseEnter('bob', '2024-01-01')
    expect(isDraggingSelection.value).toBe(false) // Drag arr√™t√©
    expect(dragStartCell.value).toBe(null)
    expect(selectedCells.value.has('bob-2024-01-01')).toBe(false)
    
    console.log('‚úÖ MouseEnter VirtualClean OK')
  })

  it('devrait d√©tecter correctement le collaborateur s√©lectionn√©', () => {
    console.log('\n=== TEST: D√©tection collaborateur VirtualClean ===')
    
    // Aucune s√©lection
    expect(getCurrentSelectedCollaborateur()).toBe(null)
    
    // Une s√©lection
    selectedCells.value.add('alice-2024-01-01')
    expect(getCurrentSelectedCollaborateur()).toBe('alice')
    
    // Plusieurs s√©lections m√™me collaborateur
    selectedCells.value.add('alice-2024-01-02')
    expect(getCurrentSelectedCollaborateur()).toBe('alice')
    
    console.log('‚úÖ D√©tection collaborateur VirtualClean OK')
  })

  it('devrait valider la restriction √† un seul collaborateur', () => {
    console.log('\n=== TEST: Validation single-collaborateur VirtualClean ===')
    
    // Aucune s√©lection = valide
    expect(validateSingleCollaboratorSelection()).toBe(true)
    
    // Une s√©lection = valide
    selectedCells.value.add('alice-2024-01-01')
    expect(validateSingleCollaboratorSelection()).toBe(true)
    
    // Plusieurs s√©lections m√™me collaborateur = valide
    selectedCells.value.add('alice-2024-01-02')
    expect(validateSingleCollaboratorSelection()).toBe(true)
    
    // S√©lections de collaborateurs diff√©rents = invalide
    selectedCells.value.add('bob-2024-01-01')
    expect(validateSingleCollaboratorSelection()).toBe(false)
    
    console.log('‚úÖ Validation single-collaborateur VirtualClean OK')
  })
})
