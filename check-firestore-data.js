import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, limit, query, connectFirestoreEmulator } from 'firebase/firestore';

const firebaseConfig = {
  projectId: 'keydispo-local'
};

// Configurer pour utiliser l'√©mulateur
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Connecter √† l'√©mulateur Firestore
try {
  // Port Firestore emulator d'apr√®s firebase.json: 8080
  connectFirestoreEmulator(db, 'localhost', 8080);
} catch (error) {
  console.log('√âmulateur d√©j√† connect√© ou erreur de connexion');
}

async function checkFirestoreData() {
  try {
    console.log('üîç V√©rification des donn√©es Firestore...');
    
    // V√©rifier tenants
    const tenantsSnap = await getDocs(query(collection(db, 'tenants'), limit(5)));
    console.log('üìÅ Collection tenants:', tenantsSnap.size, 'documents');
    
    if (tenantsSnap.size > 0) {
      tenantsSnap.forEach(doc => {
        console.log('- Tenant:', doc.id, doc.data());
      });
      
      const firstTenant = tenantsSnap.docs[0];
      console.log('\nüë• V√©rification des collaborateurs...');
      
      // V√©rifier collaborateurs
      try {
        const collabsSnap = await getDocs(query(collection(db, `tenants/${firstTenant.id}/collaborateurs`), limit(3)));
        console.log('Collaborateurs trouv√©s:', collabsSnap.size);
        
        if (collabsSnap.size > 0) {
          collabsSnap.forEach(doc => {
            console.log('- Collaborateur:', doc.id, doc.data());
          });
          
          // V√©rifier disponibilit√©s
          const firstCollab = collabsSnap.docs[0];
          console.log('\nüìÖ V√©rification des disponibilit√©s...');
          
          const disposSnap = await getDocs(query(collection(db, `tenants/${firstTenant.id}/collaborateurs/${firstCollab.id}/disponibilites`), limit(3)));
          console.log('Disponibilit√©s trouv√©es:', disposSnap.size);
          
          if (disposSnap.size > 0) {
            disposSnap.forEach(doc => {
              console.log('- Disponibilit√©:', doc.id, doc.data());
            });
          }
        }
      } catch (collabError) {
        console.log('‚ùå Erreur collaborateurs:', collabError.message);
      }
    }
    
    // V√©rifier anciennes collections
    console.log('\nüìä V√©rification des anciennes collections...');
    
    try {
      const oldDisposSnap = await getDocs(query(collection(db, 'dispos'), limit(3)));
      console.log('Collection "dispos":', oldDisposSnap.size, 'documents');
      if (oldDisposSnap.size > 0) {
        console.log('Premier doc dispos:', oldDisposSnap.docs[0].data());
      }
    } catch (error) {
      console.log('Collection "dispos" introuvable ou vide');
    }
    
    try {
      const oldDisponibilitesSnap = await getDocs(query(collection(db, 'disponibilites'), limit(3)));
      console.log('Collection "disponibilites":', oldDisponibilitesSnap.size, 'documents');
      if (oldDisponibilitesSnap.size > 0) {
        console.log('Premier doc disponibilites:', oldDisponibilitesSnap.docs[0].data());
      }
    } catch (error) {
      console.log('Collection "disponibilites" introuvable ou vide');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

checkFirestoreData();
