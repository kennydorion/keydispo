rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helpers
    function isSignedIn() {
      return request.auth != null;
    }

    function isTenantMember(tenantId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/tenants/$(tenantId)/users/$(request.auth.uid));
    }

    function userRole(tenantId) {
      return get(/databases/$(database)/documents/tenants/$(tenantId)/users/$(request.auth.uid)).data.role;
    }

    function hasRole(tenantId, allowed) {
      return isTenantMember(tenantId) && (userRole(tenantId) in allowed);
    }

    // Helpers basés sur le champ tenantId du document
    function isTenantMemberByField(tenantId) {
      return isSignedIn() && tenantId is string &&
        exists(/databases/$(database)/documents/tenants/$(tenantId)/users/$(request.auth.uid));
    }

    function hasRoleByField(tenantId, allowed) {
      return isTenantMemberByField(tenantId) && (userRole(tenantId) in allowed);
    }

    // Gestion des utilisateurs du tenant
    match /tenants/{tenantId}/users/{userId} {
      // Lecture: membre du tenant ou l'utilisateur lui-même
      allow read: if isTenantMember(tenantId) || (isSignedIn() && request.auth.uid == userId);

      // Création: l'utilisateur peut créer son propre doc au premier login
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Mise à jour: soi-même (ex: lastAccess) ou admin du tenant
      allow update: if (isSignedIn() && request.auth.uid == userId) || hasRole(tenantId, ['admin']);

      // Suppression: admin uniquement
      allow delete: if hasRole(tenantId, ['admin']);
    }

    // Collaborateurs
    match /tenants/{tenantId}/collaborateurs/{collabId} {
      allow read: if isTenantMember(tenantId);
      allow create, update, delete: if hasRole(tenantId, ['admin', 'editor']);
    }

    // Disponibilités (sous-collection des collaborateurs)
    match /tenants/{tenantId}/collaborateurs/{collabId}/disponibilites/{dateId} {
      allow read: if isTenantMember(tenantId);
      allow create, update, delete: if hasRole(tenantId, ['admin', 'editor']);
    }

    // Disponibilités (collection racine actuelle: 'dispos')
    // Protège par le champ tenantId présent sur le document
    match /dispos/{dispoId} {
      // Lecture si membre du tenant mentionné dans le doc
      allow read: if isSignedIn() && isTenantMemberByField(resource.data.tenantId);

      // Création: admin/editor du tenant spécifié; empêcher le changement de tenantId à l'update
      allow create: if isSignedIn() && hasRoleByField(request.resource.data.tenantId, ['admin', 'editor']);

      // Mise à jour: même tenantId, et rôle admin/editor sur ce tenant
      allow update: if isSignedIn() &&
        (resource.data.tenantId == request.resource.data.tenantId) &&
        hasRoleByField(request.resource.data.tenantId, ['admin', 'editor']);

      // Suppression: admin/editor du tenant du doc
      allow delete: if isSignedIn() && hasRoleByField(resource.data.tenantId, ['admin', 'editor']);
    }

    // Présence utilisateur (pour les fonctionnalités collaboratives)
    match /tenants/{tenantId}/presence/{sessionId} {
      // Lecture: tous les membres du tenant peuvent voir les présences
      allow read: if isTenantMember(tenantId);
      
      // Écriture: seulement pour sa propre session ou admin
      allow create, update: if isSignedIn() && (
        request.resource.data.uid == request.auth.uid || 
        hasRole(tenantId, ['admin'])
      );
      
      // Suppression: sa propre session ou admin
      allow delete: if isSignedIn() && (
        resource.data.uid == request.auth.uid || 
        hasRole(tenantId, ['admin'])
      );
    }

    // États de cellules (nouveau système de collaboration basé sur des données)
    match /tenants/{tenantId}/cellStates/{cellId} {
      // Lecture: tous les membres du tenant peuvent voir les états
      allow read: if isTenantMember(tenantId);
      
      // Création/Mise à jour: seulement pour ses propres états ou admin
      allow create, update: if isSignedIn() && (
        request.resource.data.userId == request.auth.uid || 
        hasRole(tenantId, ['admin'])
      );
      
      // Suppression: ses propres états, états expirés, ou admin
      allow delete: if isSignedIn() && (
        resource.data.userId == request.auth.uid || 
        hasRole(tenantId, ['admin']) ||
        // Permettre la suppression d'états expirés par n'importe qui
        (resource.data.expiresAt != null && resource.data.expiresAt < request.time)
      );
    }

    // Sessions utilisateurs (système multi-utilisateur)
    match /tenants/{tenantId}/sessions/{sessionId} {
      // Lecture: tous les membres du tenant peuvent voir les sessions
      allow read: if isTenantMember(tenantId);
      
      // Création/Mise à jour: seulement pour sa propre session ou admin
      allow create, update: if isSignedIn() && (
        request.resource.data.userId == request.auth.uid || 
        hasRole(tenantId, ['admin'])
      );
      
      // Suppression: sa propre session, sessions expirées, ou admin
      allow delete: if isSignedIn() && (
        resource.data.userId == request.auth.uid || 
        hasRole(tenantId, ['admin']) ||
        // Permettre la suppression de sessions expirées
        (resource.data.expiresAt != null && resource.data.expiresAt < request.time)
      );
    }

    // Verrous de cellules (système collaboratif hybride)
    match /tenants/{tenantId}/cellLocks/{cellId} {
      // Lecture: tous les membres du tenant peuvent voir les verrous
      allow read: if isTenantMember(tenantId);
      
      // Création/Mise à jour: seulement pour son propre verrou ou admin
      allow create, update: if isSignedIn() && (
        request.resource.data.lockedBy.userId == request.auth.uid || 
        hasRole(tenantId, ['admin'])
      );
      
      // Suppression: son propre verrou, verrous expirés, ou admin
      allow delete: if isSignedIn() && (
        resource.data.lockedBy.userId == request.auth.uid || 
        hasRole(tenantId, ['admin']) ||
        // Permettre la suppression de verrous expirés
        (resource.data.expiresAt != null && resource.data.expiresAt < request.time)
      );
    }

    // Activités de cellules (système collaboratif)
    match /tenants/{tenantId}/cellActivities/{activityId} {
      // Lecture: tous les membres du tenant peuvent voir les activités
      allow read: if isTenantMember(tenantId);
      
      // Création/Mise à jour: seulement pour sa propre activité ou admin
      allow create, update: if isSignedIn() && (
        request.resource.data.userId == request.auth.uid || 
        hasRole(tenantId, ['admin'])
      );
      
      // Suppression: sa propre activité, activités expirées, ou admin
      allow delete: if isSignedIn() && (
        resource.data.userId == request.auth.uid || 
        hasRole(tenantId, ['admin']) ||
        // Permettre la suppression d'activités expirées
        (resource.data.expiresAt != null && resource.data.expiresAt < request.time)
      );
    }

    // Par défaut: tout le reste refusé
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
