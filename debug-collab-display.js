#!/usr/bin/env node

/**
 * Script de debug pour analyser les diff√©rences d'affichage 
 * entre admin et collaborateur pour les noms de cr√©neaux
 */

console.log('üîç ANALYSE DEBUG - Diff√©rences affichage admin vs collaborateur')
console.log('================================================================')

// Simulations de donn√©es
const mockDispoAdmin = {
  date: '2024-01-15',
  lieu: 'DISPONIBLE',
  heure_debut: '',
  heure_fin: '',
  type: 'disponible',
  timeKind: 'slot',
  slots: ['midday']
}

const mockDispoCollaborateur = {
  id: 'dispo-123',
  date: '2024-01-15', 
  lieu: 'DISPONIBLE',
  heure_debut: '',
  heure_fin: '', 
  type: 'disponible',
  timeKind: 'slot',
  slots: ['midday'],
  isFullDay: false,
  version: 1
}

console.log('\nüìã DONN√âES DE TEST:')
console.log('Admin:', JSON.stringify(mockDispoAdmin, null, 2))
console.log('Collaborateur:', JSON.stringify(mockDispoCollaborateur, null, 2))

console.log('\nüîß SIMULATION planningDisplayService.getTemporalDisplay():')

// Simulation de la fonction getTemporalDisplay
function simulateGetTemporalDisplay(dispo) {
  console.log('  Input:', { 
    timeKind: dispo.timeKind, 
    slots: dispo.slots, 
    isFullDay: dispo.isFullDay 
  })
  
  if (dispo.timeKind === 'slot' && dispo.slots && dispo.slots.length > 0) {
    const slotText = dispo.slots.map(slot => {
      // Simulation de slotLabel()
      const slotLabels = {
        'morning': 'Matin',
        'midday': 'Midi',
        'afternoon': 'Apr√®s-midi',
        'evening': 'Soir',
        'night': 'Nuit'
      }
      return slotLabels[slot] || slot
    }).join(', ')
    console.log('  -> R√©sultat:', slotText)
    return slotText
  } else if (dispo.timeKind === 'full-day' || dispo.isFullDay) {
    console.log('  -> R√©sultat: Journ√©e')
    return 'Journ√©e'
  } else if (dispo.heure_debut && dispo.heure_fin) {
    const result = `${dispo.heure_debut} - ${dispo.heure_fin}`
    console.log('  -> R√©sultat:', result)
    return result
  } else {
    console.log('  -> R√©sultat: Journ√©e (fallback)')
    return 'Journ√©e'
  }
}

console.log('\n‚úÖ TEST ADMIN:')
simulateGetTemporalDisplay(mockDispoAdmin)

console.log('\n‚úÖ TEST COLLABORATEUR:')
simulateGetTemporalDisplay(mockDispoCollaborateur)

console.log('\nüîç PROBL√àMES POSSIBLES:')
console.log('1. Les donn√©es RTDB ne contiennent pas timeKind/slots')
console.log('2. Le mapping RTDB -> UI ne fonctionne pas correctement')
console.log('3. Les donn√©es import√©es n\'ont pas ces champs')
console.log('4. Diff√©rence dans les services utilis√©s (RTDB vs Firestore)')

console.log('\nüöÄ SOLUTIONS √Ä TESTER:')
console.log('1. V√©rifier les donn√©es brutes RTDB avec les outils de debug')
console.log('2. Ajouter des logs dans mapRTDBToSelf()')
console.log('3. Forcer des valeurs de test pour timeKind et slots')
console.log('4. Comparer avec les donn√©es admin (Firestore)')

console.log('\n‚úÖ Test termin√©.')
